/*************************************************************************
    > File Name: skp_test.c
    > Author: shuaixiang
    > Mail: shuaixiang@yuewen.com
    > Created Time: Fri 03 Jun 2016 10:04:29 AM CST
 ************************************************************************/

#include <stdio.h>
#include <mcheck.h>

#include "skiplist.h"

#define COUNT 1000000
#define LAST_INDEX (COUNT - 1)

static int *numbers;
void performance_test(){
    int i;
    int tmp;
    int index1;
    int index2;
    int result;
    int level[20] = {0};
    clock_t start, finish;
    srand(time(NULL));

    struct spx_skp *sl =  spx_skp_new_tmp(cmp_int, cmp_int, "test_skp", NULL, NULL);

    numbers = (int *) malloc(sizeof(int) * COUNT);
    for (i=0; i<COUNT; i++) {
        numbers[i] = i + 1;
    }

    for (i=0; i<COUNT; i++) {
        index1 = LAST_INDEX * (int64_t)rand() / (int64_t)RAND_MAX;
        index2 = LAST_INDEX * (int64_t)rand() / (int64_t)RAND_MAX;
        if (index1 == index2) {
            continue;
        }
        tmp = numbers[index1];
        numbers[index1] = numbers[index2];
        numbers[index2] = tmp;
    }

    printf("start insert test...\n");

    start = clock();
    for(i = 0; i < COUNT; i++){
        spx_skp_insert(sl, numbers + i, numbers + i);
    }
    finish = clock();

    double cost = (double)(finish -start)/CLOCKS_PER_SEC;
    printf("insert times:%.0f ms for %d\n", cost*1000, COUNT);
    int not_found_count = 0;

    start = clock();
    for(i = 0; i < COUNT; i++){
        struct spx_skp_node * node = spx_skp_find(sl, numbers + i);
        if (NULL == node)
           not_found_count++; 
        else {
           //printf("found key:%d level:%d, size:%d\n", *(int*) node->key, node->level, node->size); 
        }

        level[node->level]++;

    }
    finish = clock();

    cost = (double)(finish -start)/CLOCKS_PER_SEC;
    printf("find times:%.0f ms for %d\n", cost*1000, COUNT-not_found_count);

    for(i = 0; i < 16; i++){
        printf("level_%d: %d\n", i, level[i]);
    }

    spx_skp_destory(sl);
    free(numbers);
    printf("finish\n");
}

int main(void){
    char index_name[10] = "age";
    int j;
    setenv("MALLOC_TRACE", "mem_chk",1);
    mtrace();
    for (j = 0; j < 1; j++){
    struct spx_skp *skp = spx_skp_new(SKP_TYPE_INT, cmp_int, SKP_TYPE_INT, cmp_int, index_name, NULL, NULL);
    int i;

    int * key = (int *) malloc(sizeof(int));
    *key = 0;

    for (i = 0; i < 10; i++){
        int * value = (int *)malloc(sizeof(int));
        *value = i;
        spx_skp_insert(skp, key, value); 
    }

    spx_skp_destory(skp);

    }
    return 0;
}

